package proj.core;

import java.util.Random;

/**
 * A mutable class Monopoly that represents the board of monopoly.
 * Contains a nonstatic method boardGenerator that generates the board of Monopoly game
 * numberOfPlayersCheck method that checks if the number of players given by the user is valid or not, if it falls in the range from 2 to 6, if not it throws and exception
 * isGameOver method that checks if the game is over or not
 * accessors and mutators for each instance variable
 */
public class Monopoly {

    /**
     * Integer type NUMBER_OF_SQUER instance variable indicating number of squares of the monopoly board.
     * Location type array board, which is the board of the game
     * Player type array of players
     * Integer type numberOfPlayers, indicating the number of players in the game
     * Integer type turn, indicating the turn of players
     *
     */
    public static final int NUMBER_OF_SQUER = 40;
    private Location[] board = new Location[NUMBER_OF_SQUER];
    private Player[] players;
    private int numberOfPlayers;
    private int turn;

    /** A parameterized constructor that throws and exception,
     * the constructor is with arguments of type int, and an array of Strings, initializes the place, initializes the name, and numberOfPlayers, and the turn.
     */
    public Monopoly (int numberOfPlayers, String[] names) throws NotValidNumberOfPlayerException {

        playerGenerator( numberOfPlayers, names ); 
        boardGenerator();
        turn = 0;
    }


    /**
     * A non-static method that indicates whether the game is over or not.
     * @return false
     */
    public boolean isGameOver() {
        return false;
    }


    /**
     * A non-static method that indicates which player is in the particular position.
     * @param position An array of actions
     * @return player or null
     */
    public Player getPlayerAt(int position) {

        if (position < numberOfPlayers) {
            //return players[position].clone();
            return players[position];
        }  
        else
            return null;
    }

    /**
     * Accessor method for the number of players.
     * @return number of players (int type).
     */
    public int getNumberOfPlayer() {
        return numberOfPlayers;
    }

    /**
     * A non-static method that returns the location according the given position.
     * @param position
     * @return board[position] (the location)
     */
    public Location getLocationAt(int position) {
        return board[position];
    }

    /**
     * A non-static method that returns the location according the given position.
     * @param i
     * @param j
     * @return true or false
     */
    public boolean hasPositionAt(int i, int j) {
        return i * 11 + j < 40;
    }

    /**
     * A static method that returns a random number generated by the dice of monopoly
     * @return diceFace (random integer in the range from 1 to 6)
     */
    public static int dice() {
        
        Random m = new Random();
        int diceFace = m.nextInt(6) + 1;
        return  diceFace;
    }

    /**
     * Mutator method for the numberOfPlayers.
     * @return A string representation of the number of players of the game.
     */
    public String toString() {
        return "Monopoly Game with " + numberOfPlayers + " players.";
    }

    /**
     * Accessor method for the turn of a player.
     * @return turn (int).
     */
    public int getTurn() {
        return  this.turn;
    }

    /**
     * A non-static method that for setting the turn of players
     */
    public void setNextTurn() {
        this.turn = (this.turn + 1) % numberOfPlayers;
    }

    /**
     * A non-static method that generates the players of the game
     * @param numberOfPlayers
     * @param names
     */
    private void playerGenerator(int numberOfPlayers, String[] names) throws NotValidNumberOfPlayerException {
        // chacking
        numberOfPlayersCheck(numberOfPlayers, names.length);

        this.numberOfPlayers = numberOfPlayers;
        players = new Player[numberOfPlayers];
        for (int i = 0; i < this.numberOfPlayers; i++)  
            players[i] = new Player(names[i]);
    }

    /**
     * A non-static method that checks whether the number of players fall within the appropriate range of monopoly players(2-6),
     * if the number of players is not valid it throws an exception
     * @param numberOfPlayers
     * @param nameCount
     */

    private void numberOfPlayersCheck(int numberOfPlayers, int nameCount) throws NotValidNumberOfPlayerException {
        if (numberOfPlayers < 2 || numberOfPlayers > 6 || numberOfPlayers != nameCount) {
            throw new NotValidNumberOfPlayerException();
        }      
    }

    /**
     * A non-static method that generates and prints the board of the monopoly game,
     */
    private void boardGenerator() {

        for (int i = 0; i < NUMBER_OF_SQUER; i++ ) {
            switch (i) {
                case 0:

                    String [] actions0 = {"Take your salary $ 200"};
                    board[i] = new Location(i, "GO", actions0);
                    break;

                case 1:
                case 3:
                case 6:
                case 8:
                case 9:
                case 11:
                case 13:
                case 14:
                case 16:
                case 18:
                case 19:
                case 21:
                case 23:
                case 24:
                case 26:
                case 27:
                case 29:
                case 31:
                case 32:
                case 34:
                case 37:
                case 39:
                    board[i] = new PurchasableLocation(i, "Street",  " for ranting this street.", 100);
                    break;
                
                case 4:
                    String [] actions2 = {"Pay your new tax $ 200"};
                    board[i] = new Location(i, "IncomeTax", actions2);
                    break;

                case 38:
                    String [] actions38 = {"Pay your new tax $ 100"};
                    board[i] = new Location(i, "LuxuryTex", actions38);
                    break;

                case 2:
                case 7:
                case 17:
                case 22:
                case 33:
                case 36:

                    String [] actions36 = { "Take your bonus  $ 100",
                                            "Take your bonus  $ 50",
                                            "Pay your panalty $ 70",
                                            "Pay your panalty $ 35"
                    };
                    board[i] = new Chance(i,  actions36);
                    break;

                case 5:
                case 15:
                case 25:
                case 35:
                
                    board[i] = new PurchasableLocation(i, "Transportation", " for using this transportaion.", 200); 
                    break;

                case 10:

                    String [] actions10 = {"Visit your friends in jail!", "I dont want to vist anyone."};
                    board[i] = new Location(i, "Jail", actions10); 
                    break;

                case 20:

                    String [] actions20 = {"You can park here free."};
                    board[i] = new Location(i, "Parking", actions20); 
                    break;

                case 30:
                    board[i] = new GoToJail(i);
                    break;


                case 12:
                case 28:

                    board[i] = new PurchasableLocation(i, "Utility", " for your bills." , 150); 
                    break;



                default:
                    board[i] = new Location(i, "No.");
                    break;
            }
            
        }   
    }
}